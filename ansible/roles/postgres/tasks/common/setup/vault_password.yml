---
- block:
    - name: "common | ssh | setup | vault_password | Read secret {{ password_vault_path }}:{{ password_vault_key }}"
      hashivault_read:
        url: "{{ postgres_secret_vault_api_endpoint }}"
        token: "{{ postgres_secret_vault_client_token }}"
        ca_cert: "/etc/pki/tls/certs/ca-bundle.crt"
        secret: "{{ postgres_secret_vault_root_path }}{{ password_vault_path }}"
        key: "{{ password_vault_key }}"
        version: 2
      register: _fetch_vault_user_password
      no_log: yes
      failed_when: 
        - _fetch_vault_user_password.rc is defined
        - _fetch_vault_user_password.rc > 0 and not (_fetch_vault_user_password.msg is search('.*is not in vault') or _fetch_vault_user_password.msg is search('Key.*is not in secret.*'))

    - name: "common | ssh | setup | vault_password | Store user password in {{ password_varname }} variable"
      set_fact:
        "{{ password_varname }}": "{{ _fetch_vault_user_password.value|d(lookup('ansible.builtin.password', '/dev/null length=16 chars=ascii_letters,digits')) }}"
      when: action == 'read'
      no_log: yes

  become: no
  run_once: yes
  when: action == 'read'
  delegate_to: localhost

- block:
    - set_fact:
        postgres_user_password_data: >
          {
            "{{ password_vault_key }}": "{{ hostvars[inventory_hostname][password_varname] }}"
          }
      no_log: yes

    - name: "common | ssh | setup | vault_password | Write secret {{ password_vault_path }}:{{ password_vault_key }}"
      hashivault_write:
        url: "{{ postgres_secret_vault_api_endpoint }}"
        token: "{{ postgres_secret_vault_client_token }}"
        ca_cert: "/etc/pki/tls/certs/ca-bundle.crt"
        secret: "{{ postgres_secret_vault_root_path }}{{ password_vault_path }}"
        update: yes
        version: 2
        data: "{{ postgres_user_password_data }}"
      register: _gen_vault_user_password
      failed_when: _gen_vault_user_password.rc > 0 and not _gen_vault_user_password.msg is search('.*Secret.*written.*')

  become: no
  run_once: yes
  when: action == 'write'
  delegate_to: localhost
